[M] Owner can change price variable whilst the deposit function is executing which can result in loss
of funds for early depositors.

In function depost, users deposit packages into the fund.

Once deposited, the fund stores the package and deposit info in the deposits array.

   // store deposited package amount on storage
        deposits[id] = DepositInfo(_msgSender(), amount, busdAmount, block.timestamp);

The public price variable of 250 eth, prior to this, is checked against the amount of BUSD sent by the user.

   // total BUSD deposited
        uint256 busdAmount = amount * price;

However, the vulnerability comes from the fact that before the transaction is completed, 
the owner can change the price variable.

    function setPackagePrice(uint newPrice) external onlyOwner {
        require(newPrice > 0, 'Zero Price');
        price = newPrice;
    }

The user will receive a notifcation that their transaction completed with the assumption
that the price was fixed at 250 ETH.

But lets say the owner increases the price to 500 ETH, the users initial balance will be lower than 
the amount of BUSD they sent.

Mitigation:

Fetch the current price variable before calculating the total of BUSD deposited.

  // Retrieve the current price
    uint256 currentPrice = price;

Then, check if the price has changed before the deposit process and revert if so.

    // Check if the price has changed during the deposit process
    if (currentPrice != price) {
        revert("Price has changed during deposit");
    }

---------------------------------








[M] Out of bounds array in depositsof and potentially depositsOfOwnerInRange

Also, startIndex and endIndex are not checked in depositsOfOwnerInRange

[M] does deposit actually receive BUSD?